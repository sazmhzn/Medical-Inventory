import React, { useState } from "react";
import { Checkbox } from "@/components/ui/checkbox";
import {
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";

const CONFIGURABLE_FIELDS = [
  { id: "orgName", label: "Organization Name", previewValue: "Example Org" },
  { id: "pageNo", label: "Page Number", previewValue: "1" },
  { id: "generatedDate", label: "Generated Date", previewValue: "2024-12-12" },
  { id: "generatedBy", label: "Generated By", previewValue: "Admin" },
  { id: "time", label: "Time", previewValue: "12:00 PM" },
];

interface LayoutConfigurationDialogProps {
  dialogOpen: boolean;
  setDialogOpen: (open: boolean) => void;
  initialSelectedFields?: Record<string, boolean>;
  onSave?: (config: {
    selectedFields: Record<string, boolean>;
    tableDesign: string;
    orientation: string;
  }) => void;
}

const LayoutConfigurationDialog: React.FC<LayoutConfigurationDialogProps> = ({
  dialogOpen,
  setDialogOpen,
  initialSelectedFields = {},
  onSave,
}) => {
  const [selectedFields, setSelectedFields] = useState(
    Object.keys(initialSelectedFields).length > 0
      ? initialSelectedFields
      : {
          orgName: true,
          generatedDate: false,
          generatedBy: true,
          time: true,
          pageNo: false,
        }
  );
  const [tableDesign, setTableDesign] = useState("default");
  const [orientation, setOrientation] = useState("default");

  const handleFieldChange = (fieldId: string) => {
    setSelectedFields((prev) => ({
      ...prev,
      [fieldId]: !prev[fieldId],
    }));
  };

  const handleSave = () => {
    onSave?.({
      selectedFields,
      tableDesign,
      orientation,
    });
    setDialogOpen(false);
  };

  // Dummy data for the table
  const tableData = [
    {
      id: 1,
      orgName: "Example Org",
      pageNo: "1",
      generatedDate: "2024-12-12",
      generatedBy: "Admin",
      time: "12:00 PM",
    },
    {
      id: 2,
      orgName: "Another Org",
      pageNo: "2",
      generatedDate: "2024-12-13",
      generatedBy: "Admin",
      time: "1:00 PM",
    },
  ];

  return (
    <DialogContent>
      <DialogHeader>
        <DialogTitle className="text-xl font-semibold">
          Edit Layout Configuration
        </DialogTitle>
        <DialogDescription>
          Customize the details and layout of your report. Click save when
          you're done.
        </DialogDescription>
      </DialogHeader>

      <div className="flex gap-8 mt-6">
        {/* Checkbox Section */}
        <div className="w-1/2">
          <h2 className="text-lg font-medium mb-4">
            Choose Details to Display
          </h2>
          <div className="flex flex-col gap-2">
            {CONFIGURABLE_FIELDS.map((field) => (
              <div key={field.id} className="flex items-center space-x-2">
                <Checkbox
                  id={field.id}
                  checked={selectedFields[field.id] || false}
                  onCheckedChange={() => handleFieldChange(field.id)}
                />
                <Label
                  htmlFor={field.id}
                  className="text-sm font-medium leading-none"
                >
                  {field.label}
                </Label>
              </div>
            ))}
          </div>
        </div>

        {/* Preview Section */}
        <div className="w-1/2 border rounded-md p-4 bg-gray-50">
          <h2 className="text-lg font-medium mb-4">Preview</h2>
          <div className="space-y-4">
            {CONFIGURABLE_FIELDS.map(
              (field) =>
                selectedFields[field.id] && (
                  <div key={field.id} className="flex items-center space-x-2">
                    <Label className="text-sm">{field.label}</Label>
                    <span className="font-semibold">{field.previewValue}</span>
                  </div>
                )
            )}
          </div>
        </div>
      </div>

      {/* Report Layout Section */}
      <div className="mt-6">
        <h2 className="text-lg font-medium mb-4">Report Layout</h2>
        <div className="flex flex-col gap-4">
          {/* Table Design Select */}
          <div>
            <Label className="block text-sm font-medium mb-2">
              Table Design
            </Label>
            <Select value={tableDesign} onValueChange={setTableDesign}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Select design" />
              </SelectTrigger>
              <SelectContent>
                <SelectGroup>
                  <SelectItem value="default">Default</SelectItem>
                  <SelectItem value="alternative">Alternative Rows</SelectItem>
                </SelectGroup>
              </SelectContent>
            </Select>
          </div>

          {/* Orientation Radio Buttons */}
          <div>
            <Label className="block text-sm font-medium mb-2">
              Orientation
            </Label>
            <RadioGroup value={orientation} onValueChange={setOrientation}>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="default" id="portrait" />
                <Label htmlFor="portrait">Portrait</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="landscape" id="landscape" />
                <Label htmlFor="landscape">Landscape</Label>
              </div>
            </RadioGroup>
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="mt-6 flex justify-end gap-4">
        <Button variant="secondary" onClick={() => setDialogOpen(false)}>
          Cancel
        </Button>
        <Button onClick={handleSave}>Save</Button>
      </div>
    </DialogContent>
  );
};

export default LayoutConfigurationDialog;
